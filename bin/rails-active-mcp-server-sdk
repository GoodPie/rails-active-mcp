#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'

# Load Rails environment if available
require './config/environment' if File.exist?('config/environment.rb')

# Load the gem
require_relative '../lib/rails_active_mcp'

# Load SDK components
require_relative '../lib/rails_active_mcp/sdk/server'
require_relative '../lib/rails_active_mcp/sdk/tools/console_execute_tool'
require_relative '../lib/rails_active_mcp/sdk/tools/model_info_tool'
require_relative '../lib/rails_active_mcp/sdk/tools/safe_query_tool'
require_relative '../lib/rails_active_mcp/sdk/tools/dry_run_tool'

# For now, let's create a simple server to test the concept
begin
  server = RailsActiveMcp::Sdk::Server.new

  case ARGV[0]
  when 'stdio', nil
    puts 'Starting Rails Active MCP Server (SDK) in STDIO mode' if ENV['RAILS_MCP_DEBUG']
    server.run_stdio
  when 'http'
    port = ARGV.include?('--port') ? ARGV[ARGV.index('--port') + 1].to_i : 3001
    puts "Starting Rails Active MCP Server (SDK) on HTTP port #{port}" if ENV['RAILS_MCP_DEBUG']
    server.run_http(port: port)
  else
    puts 'Usage: rails-active-mcp-server-sdk [stdio|http] [--port PORT]'
    puts '  stdio: For Claude Desktop integration (default)'
    puts '  http:  For HTTP-based integrations'
    exit(1)
  end
rescue Interrupt
  puts "\nShutting down Rails Active MCP Server (SDK)..." if ENV['RAILS_MCP_DEBUG']
  exit(0)
rescue StandardError => e
  warn "Error starting server: #{e.message}"
  warn e.backtrace.join("\n") if ENV['RAILS_MCP_DEBUG']
  exit(1)
end
