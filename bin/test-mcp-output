#!/usr/bin/env ruby
# frozen_string_literal: true

# Enhanced MCP Output Testing Script
# Tests Rails Active MCP server output and protocol compliance

require 'json'
require 'timeout'
require 'open3'
require 'colorize'

class McpOutputTester
  def initialize
    @test_results = []
    @server_process = nil
  end

  def run_all_tests
    puts 'üß™ Rails Active MCP Output Tester'.colorize(:blue)
    puts '=' * 50

    check_prerequisites
    test_server_startup
    test_protocol_compliance
    test_tool_functionality
    test_error_handling
    test_performance

    print_summary
  end

  private

  def check_prerequisites
    puts "\nüìã Checking Prerequisites...".colorize(:yellow)

    # Check if in Rails project
    unless File.exist?('config/environment.rb')
      fail_test('Not in a Rails project directory')
      return
    end
    pass_test('Rails project detected')

    # Check if Rails Active MCP is installed
    unless File.exist?('bin/rails-active-mcp-server')
      fail_test('rails-active-mcp-server not found')
      return
    end
    pass_test('MCP server executable found')

    # Check if wrapper exists
    if File.exist?('bin/rails-active-mcp-wrapper')
      pass_test('MCP wrapper script found')
    else
      warn_test('MCP wrapper script not found (optional)')
    end

    # Check Rails environment
    begin
      require_relative '../config/environment'
      pass_test('Rails environment loads successfully')
    rescue StandardError => e
      fail_test("Rails environment failed to load: #{e.message}")
    end
  end

  def test_server_startup
    puts "\nüöÄ Testing Server Startup...".colorize(:yellow)

    begin
      # Test server starts without crashing
      stdin, stdout, stderr, wait_thr = Open3.popen3('./bin/rails-active-mcp-server', 'stdio')

      # Give server time to start
      sleep(2)

      if wait_thr.alive?
        pass_test('Server starts successfully')

        # Keep reference for later tests
        @server_stdin = stdin
        @server_stdout = stdout
        @server_stderr = stderr
        @server_process = wait_thr
      else
        stderr_output = stderr.read
        fail_test("Server failed to start: #{stderr_output}")
        nil
      end
    rescue StandardError => e
      fail_test("Server startup error: #{e.message}")
    end
  end

  def test_protocol_compliance
    puts "\nüì° Testing MCP Protocol Compliance...".colorize(:yellow)

    return unless @server_stdin && @server_stdout

    # Test initialize method
    test_initialize_request

    # Test tools/list method
    test_tools_list_request

    # Test invalid method
    test_invalid_method_request
  end

  def test_initialize_request
    request = {
      jsonrpc: '2.0',
      id: 1,
      method: 'initialize',
      params: {
        protocolVersion: '2025-06-18',
        capabilities: {},
        clientInfo: {
          name: 'test-client',
          version: '1.0.0'
        }
      }
    }

    response = send_request(request)

    if response && response['result']
      if response['result']['serverInfo'] && response['result']['capabilities']
        pass_test('Initialize request successful')
      else
        fail_test('Initialize response missing required fields')
      end
    else
      fail_test('Initialize request failed')
    end
  end

  def test_tools_list_request
    request = {
      jsonrpc: '2.0',
      id: 2,
      method: 'tools/list',
      params: {}
    }

    response = send_request(request)

    if response && response['result'] && response['result']['tools']
      tools = response['result']['tools']
      expected_tools = %w[console_execute model_info safe_query dry_run]

      found_tools = tools.pluck('name')
      missing_tools = expected_tools - found_tools

      if missing_tools.empty?
        pass_test("All expected tools found: #{found_tools.join(', ')}")
      else
        warn_test("Missing tools: #{missing_tools.join(', ')}")
      end
    else
      fail_test('Tools list request failed')
    end
  end

  def test_invalid_method_request
    request = {
      jsonrpc: '2.0',
      id: 3,
      method: 'invalid_method',
      params: {}
    }

    response = send_request(request)

    if response && response['error']
      pass_test('Invalid method properly returns error')
    else
      fail_test('Invalid method should return error')
    end
  end

  def test_tool_functionality
    puts "\nüîß Testing Tool Functionality...".colorize(:yellow)

    return unless @server_stdin && @server_stdout

    # Test console_execute tool
    test_console_execute_tool

    # Test safe_query tool
    test_safe_query_tool

    # Test dry_run tool
    test_dry_run_tool
  end

  def test_console_execute_tool
    request = {
      jsonrpc: '2.0',
      id: 4,
      method: 'tools/call',
      params: {
        name: 'console_execute',
        arguments: {
          code: '1 + 1'
        }
      }
    }

    response = send_request(request)

    if response && response['result']
      pass_test('console_execute tool works')
    else
      fail_test('console_execute tool failed')
    end
  end

  def test_safe_query_tool
    # Skip if no User model
    return warn_test('Skipping safe_query test (no User model)') unless defined?(User)

    request = {
      jsonrpc: '2.0',
      id: 5,
      method: 'tools/call',
      params: {
        name: 'safe_query',
        arguments: {
          model: 'User',
          method: 'count'
        }
      }
    }

    response = send_request(request)

    if response && response['result']
      pass_test('safe_query tool works')
    else
      fail_test('safe_query tool failed')
    end
  end

  def test_dry_run_tool
    request = {
      jsonrpc: '2.0',
      id: 6,
      method: 'tools/call',
      params: {
        name: 'dry_run',
        arguments: {
          code: 'User.delete_all'
        }
      }
    }

    response = send_request(request)

    if response && response['result']
      pass_test('dry_run tool works')
    else
      fail_test('dry_run tool failed')
    end
  end

  def test_error_handling
    puts "\nüö® Testing Error Handling...".colorize(:yellow)

    return unless @server_stdin && @server_stdout

    # Test malformed JSON
    test_malformed_json

    # Test dangerous code execution
    test_dangerous_code_execution
  end

  def test_malformed_json
    malformed_request = '{"jsonrpc":"2.0","id":7,"method":"tools/list"' # Missing closing brace

    begin
      @server_stdin.puts(malformed_request)
      @server_stdin.flush

      # Server should handle gracefully
      warn_test('Malformed JSON test sent')
    rescue StandardError => e
      fail_test("Server crashed on malformed JSON: #{e.message}")
    end
  end

  def test_dangerous_code_execution
    request = {
      jsonrpc: '2.0',
      id: 8,
      method: 'tools/call',
      params: {
        name: 'console_execute',
        arguments: {
          code: "system('echo dangerous')"
        }
      }
    }

    response = send_request(request)

    if response && response['result']&.to_s&.include?('dangerous')
      fail_test('Dangerous code executed successfully (security issue)')
    elsif response && response['error']
      pass_test('Dangerous code properly blocked')
    else
      warn_test('Dangerous code test inconclusive')
    end
  end

  def test_performance
    puts "\n‚ö° Testing Performance...".colorize(:yellow)

    return unless @server_stdin && @server_stdout

    # Test response time
    start_time = Time.zone.now

    request = {
      jsonrpc: '2.0',
      id: 9,
      method: 'tools/list',
      params: {}
    }

    send_request(request)
    end_time = Time.zone.now

    response_time = end_time - start_time

    if response_time < 1.0
      pass_test("Response time good: #{(response_time * 1000).round(2)}ms")
    elsif response_time < 3.0
      warn_test("Response time slow: #{(response_time * 1000).round(2)}ms")
    else
      fail_test("Response time too slow: #{(response_time * 1000).round(2)}ms")
    end
  end

  def send_request(request_hash)
    return nil unless @server_stdin && @server_stdout

    begin
      request_json = JSON.generate(request_hash)
      @server_stdin.puts(request_json)
      @server_stdin.flush

      # Wait for response with timeout
      Timeout.timeout(5) do
        response_line = @server_stdout.readline
        JSON.parse(response_line)
      end
    rescue Timeout::Error
      fail_test('Request timed out')
      nil
    rescue StandardError => e
      fail_test("Request failed: #{e.message}")
      nil
    end
  end

  def pass_test(message)
    @test_results << { status: :pass, message: message }
    puts "  ‚úÖ #{message}".colorize(:green)
  end

  def fail_test(message)
    @test_results << { status: :fail, message: message }
    puts "  ‚ùå #{message}".colorize(:red)
  end

  def warn_test(message)
    @test_results << { status: :warn, message: message }
    puts "  ‚ö†Ô∏è  #{message}".colorize(:yellow)
  end

  def print_summary
    puts "\nüìä Test Summary".colorize(:blue)
    puts '=' * 50

    passed = @test_results.count { |r| r[:status] == :pass }
    failed = @test_results.count { |r| r[:status] == :fail }
    warned = @test_results.count { |r| r[:status] == :warn }
    total = @test_results.count

    puts "Total tests: #{total}"
    puts "Passed: #{passed}".colorize(:green)
    puts "Failed: #{failed}".colorize(failed > 0 ? :red : :green)
    puts "Warnings: #{warned}".colorize(warned > 0 ? :yellow : :green)

    if failed > 0
      puts "\n‚ùå Some tests failed. Check the output above for details.".colorize(:red)
      puts 'Consider running: rails rails_active_mcp:status'.colorize(:yellow)
    elsif warned > 0
      puts "\n‚ö†Ô∏è  Tests passed with warnings.".colorize(:yellow)
    else
      puts "\n‚úÖ All tests passed!".colorize(:green)
      puts 'Your Rails Active MCP setup is working correctly.'.colorize(:green)
    end

    cleanup_server
  end

  def cleanup_server
    return unless @server_process&.alive?

    begin
      @server_stdin&.close
      @server_stdout&.close
      @server_stderr&.close
      Process.kill('TERM', @server_process.pid)
      @server_process.join(5) # Wait up to 5 seconds
    rescue StandardError => e
      puts "Warning: Could not cleanly shutdown server: #{e.message}".colorize(:yellow)
    end
  end
end

# Add colorize gem check
begin
  require 'colorize'
rescue LoadError
  # Fallback: define colorize as no-op if gem not available
  class String
    def colorize(_color)
      self
    end
  end
end

# Run the tests
tester = McpOutputTester.new
tester.run_all_tests
