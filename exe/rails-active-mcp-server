#!/usr/bin/env ruby
# frozen_string_literal: true

# Require essential gems first
require 'json'
require 'stringio'

# CRITICAL: Redirect stdout IMMEDIATELY for stdio mode to prevent any output interference
# This must happen before any other gem loading
original_stdout = $stdout
original_stderr = $stderr

# Determine if we should redirect output (stdio mode or explicit request)
should_redirect = (ARGV.first == 'stdio' || ARGV.first.nil?) && !ENV['RAILS_MCP_DEBUG']

if should_redirect
  # Create log directory early
  log_dir = File.join(Dir.pwd, 'log')
  Dir.mkdir(log_dir) unless Dir.exist?(log_dir)

  # Redirect stderr to log file immediately, before any loading
  stderr_log = File.join(log_dir, 'rails_mcp_stderr.log')
  $stderr.reopen(stderr_log, 'a')
  $stderr.sync = true

  # Use StringIO to capture any unwanted stdout during loading
  # We'll filter out non-JSON content later
  captured_stdout = StringIO.new
  $stdout = captured_stdout
end

# Initialize Rails environment if available (from current working directory)
rails_loaded = false
rails_load_error = nil
if File.exist?('config/environment.rb')
  begin
    require './config/environment'
    rails_loaded = true

    # Log successful Rails loading
    warn "[#{Time.now}] [RAILS-MCP] INFO: Rails environment loaded successfully" if should_redirect
  rescue StandardError => e
    # Rails loading failed, continue without it
    rails_load_error = e
    # Log to stderr (which is already redirected if needed)
    warn "[#{Time.now}] [RAILS-MCP] WARNING: Failed to load Rails environment: #{e.message}"
    warn "[#{Time.now}] [RAILS-MCP] WARNING: #{e.backtrace.first(3).join("\n")}" if ENV['RAILS_MCP_DEBUG']
  end
elsif should_redirect
  warn "[#{Time.now}] [RAILS-MCP] INFO: No Rails environment found (config/environment.rb missing)"
end

# Restore stdout after Rails loading for stdio mode (stderr stays redirected)
if should_redirect
  # Check if anything was captured during loading
  captured_content = captured_stdout.string
  unless captured_content.empty?
    # Log any captured content to stderr for debugging
    warn "[#{Time.now}] [RAILS-MCP] WARNING: Captured stdout during loading: #{captured_content.inspect}"
    $stderr.flush
  end

  # Restore original stdout
  $stdout = original_stdout
end

# Now load the gem
begin
  require_relative '../lib/rails_active_mcp'
rescue LoadError => e
  warn "[#{Time.now}] [RAILS-MCP] FATAL: Failed to load rails_active_mcp gem: #{e.message}"
  exit(1)
end

# Parse command line options
transport = ARGV[0] || 'stdio'
port = ARGV.include?('--port') ? ARGV[ARGV.index('--port') + 1].to_i : 3001
host = ARGV.include?('--host') ? ARGV[ARGV.index('--host') + 1] : 'localhost'

case transport
when 'stdio'
  # Stdio transport for Claude Desktop using MCP SDK
  begin
    require_relative '../lib/rails_active_mcp/sdk/server'

    # Log startup information
    if should_redirect
      warn "[#{Time.now}] [RAILS-MCP] INFO: Starting Rails Active MCP Server v#{RailsActiveMcp::VERSION}"
    end
    warn "[#{Time.now}] [RAILS-MCP] INFO: Rails loaded: #{rails_loaded}" if should_redirect
    if rails_load_error && should_redirect
      warn "[#{Time.now}] [RAILS-MCP] WARNING: Rails load error: #{rails_load_error.class.name}: #{rails_load_error.message}"
    end

    server = RailsActiveMcp::Sdk::Server.new
    server.run_stdio
  rescue Interrupt
    warn "[#{Time.now}] [RAILS-MCP] INFO: Server interrupted by user" if should_redirect
    exit(0)
  rescue LoadError => e
    warn "[#{Time.now}] [RAILS-MCP] FATAL: MCP SDK not available: #{e.message}"
    warn "[#{Time.now}] [RAILS-MCP] FATAL: Please install the MCP gem: gem install mcp"
    exit(1)
  rescue StandardError => e
    warn "[#{Time.now}] [RAILS-MCP] FATAL: Server startup failed: #{e.message}"
    warn "[#{Time.now}] [RAILS-MCP] FATAL: #{e.backtrace.join("\n")}" if ENV['RAILS_MCP_DEBUG']
    exit(1)
  end

when 'http'
  puts 'Error: HTTP transport is no longer supported in v2.0.0'
  puts 'Please use stdio mode for MCP integration: rails-active-mcp-server stdio'
  puts ''
  puts 'For more information, see the migration guide in the documentation.'
  exit(1)

when '--help', '-h'
  puts 'Rails Active MCP Server'
  puts "Version: #{RailsActiveMcp::VERSION}"
  puts ''
  puts 'Usage: rails-active-mcp-server [stdio] [options]'
  puts '  stdio: For MCP integration (default)'
  puts ''
  puts 'Options:'
  puts '  --help, -h Show this help message'
  puts ''
  puts 'Environment variables:'
  puts '  RAILS_MCP_DEBUG=1  Enable debug logging and disable output redirection'
  puts ''
  puts 'Examples:'
  puts '  rails-active-mcp-server stdio                # Start in stdio mode'
  puts '  RAILS_MCP_DEBUG=1 rails-active-mcp-server   # Start with debug logging'
  puts ''
  puts 'Note: HTTP transport was removed in v2.0.0. Use stdio mode for MCP integration.'
  exit(0)

else
  puts 'Usage: rails-active-mcp-server [stdio] [options]'
  puts '  stdio: For MCP integration (default)'
  puts ''
  puts 'Options:'
  puts '  --help, -h Show this help message'
  puts ''
  puts 'Environment variables:'
  puts '  RAILS_MCP_DEBUG=1  Enable debug logging and disable output redirection'
  puts ''
  puts 'Note: HTTP transport was removed in v2.0.0. Use stdio mode for MCP integration.'
  exit(1)
end
