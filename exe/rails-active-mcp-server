#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rack'
require 'json'
require 'stringio'

# Suppress ALL output immediately when running stdio mode to prevent MCP JSON protocol interference
original_stdout = $stdout
original_stderr = $stderr

# Determine if we should redirect output (stdio mode or explicit request)
should_redirect = (ARGV.first == 'stdio' || ARGV.first.nil?) && !ENV['RAILS_MCP_DEBUG']

if should_redirect
  # Create log directory early
  log_dir = File.join(Dir.pwd, 'log')
  Dir.mkdir(log_dir) unless Dir.exist?(log_dir)

  # Redirect stderr to log file immediately, before Rails loading
  stderr_log = File.join(log_dir, 'rails_mcp_stderr.log')
  $stderr.reopen(stderr_log, 'a')
  $stderr.sync = true

  # Redirect stdout to null to prevent any Rails output from interfering
  $stdout = StringIO.new
end

# Initialize Rails environment if available (from current working directory)
rails_loaded = false
if File.exist?('config/environment.rb')
  begin
    require './config/environment'
    rails_loaded = true
  rescue StandardError => e
    # Rails loading failed, continue without it
    # Log to stderr (which is already redirected if needed)
    warn "[#{Time.now}] [RAILS-MCP] WARNING: Failed to load Rails environment: #{e.message}"
    warn "[#{Time.now}] [RAILS-MCP] WARNING: #{e.backtrace.first(3).join("\n")}" if ENV['RAILS_MCP_DEBUG']
  end
end

# Restore stdout after Rails loading for stdio mode (stderr stays redirected)
$stdout = original_stdout if should_redirect

# Now load the gem
require_relative '../lib/rails_active_mcp'

# Parse command line options with config defaults (only after Rails is loaded)
default_mode = if rails_loaded && defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_mode.to_s
               else
                 'stdio'
               end
default_port = if rails_loaded && defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_port
               else
                 3001
               end
default_host = if rails_loaded && defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_host
               else
                 'localhost'
               end

transport = ARGV[0] || default_mode
port = ARGV.include?('--port') ? ARGV[ARGV.index('--port') + 1].to_i : default_port
host = ARGV.include?('--host') ? ARGV[ARGV.index('--host') + 1] : default_host

case transport
when 'stdio'
  # Stdio transport for Claude Desktop
  require_relative '../lib/rails_active_mcp/stdio_server'

  begin
    stdio_server = RailsActiveMcp::StdioServer.new
    stdio_server.start
  rescue Interrupt
    exit(0)
  end

when 'http'
  # HTTP transport for other integrations
  puts 'Warning: Rails environment not loaded. Some features may not work properly.' unless rails_loaded

  puts "Starting Rails Active MCP Server on #{host}:#{port}"
  puts 'Press Ctrl+C to stop'

  begin
    require 'webrick'
    require 'rack/handler/webrick'

    Rack::Handler::WEBrick.run(
      RailsActiveMcp::McpServer.new,
      Port: port,
      Host: host,
      Logger: WEBrick::Log.new(nil, WEBrick::BasicLog::WARN)
    )
  rescue LoadError => e
    puts 'Error: WEBrick not available. Please install: gem install webrick'
    puts 'Or use stdio mode for Claude Desktop: rails-active-mcp-server stdio'
    exit(1)
  rescue Interrupt
    puts "\nShutting down server..."
  end

else
  puts 'Usage: rails-active-mcp-server [stdio|http] [--port PORT] [--host HOST]'
  puts '  stdio: For Claude Desktop integration'
  puts '  http:  For HTTP-based integrations'
  puts ''
  puts 'Environment variables:'
  puts '  RAILS_MCP_DEBUG=1  Enable debug logging'
  exit(1)
end
