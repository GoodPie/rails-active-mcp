#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rack'
require 'json'
require 'stringio'
require_relative '../lib/rails_active_mcp'

# Parse command line options with config defaults
default_mode = if defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_mode.to_s
               else
                 'stdio'
               end
default_port = if defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_port
               else
                 3001
               end
default_host = if defined?(RailsActiveMcp) && RailsActiveMcp.respond_to?(:config)
                 RailsActiveMcp.config.server_host
               else
                 'localhost'
               end

transport = ARGV[0] || default_mode
port = ARGV.include?('--port') ? ARGV[ARGV.index('--port') + 1].to_i : default_port
host = ARGV.include?('--host') ? ARGV[ARGV.index('--host') + 1] : default_host

case transport
when 'stdio'
  # Stdio transport for Claude Desktop
  require_relative '../lib/rails_active_mcp/stdio_server'

  begin
    # Initialize Rails environment if available (from current working directory)
    if File.exist?('config/environment.rb')
      # Suppress Rails output to avoid interfering with MCP JSON protocol
      original_stdout = $stdout
      $stdout = StringIO.new

      begin
        require './config/environment'
      rescue StandardError => e
        # Log to stderr but don't fail - the server can work without Rails
        warn "Warning: Could not load Rails environment: #{e.message}"
      ensure
        $stdout = original_stdout
      end
    end

    stdio_server = RailsActiveMcp::StdioServer.new
    stdio_server.run
  rescue Interrupt
    exit(0)
  end

when 'http'
  # HTTP transport for other integrations
  puts "Starting Rails Active MCP Server on #{host}:#{port}"
  puts 'Press Ctrl+C to stop'

  begin
    require 'webrick'
    require 'rack/handler/webrick'

    Rack::Handler::WEBrick.run(
      RailsActiveMcp::McpServer.new,
      Port: port,
      Host: host,
      Logger: WEBrick::Log.new(nil, WEBrick::BasicLog::WARN)
    )
  rescue LoadError => e
    puts 'Error: WEBrick not available. Please install: gem install webrick'
    puts 'Or use stdio mode for Claude Desktop: rails-active-mcp-server stdio'
    exit(1)
  rescue Interrupt
    puts "\nShutting down server..."
  end

else
  puts 'Usage: rails-active-mcp-server [stdio|http] [--port PORT] [--host HOST]'
  puts '  stdio: For Claude Desktop integration'
  puts '  http:  For HTTP-based integrations (default)'
  exit(1)
end
